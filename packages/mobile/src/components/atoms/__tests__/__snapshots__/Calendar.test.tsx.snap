// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CalendarComponent should match snapshot when isMonthView is false 1`] = `
CalendarComponent {
  "componentDidMount": [Function],
  "context": Object {},
  "getSelectedDate": [Function],
  "getYearsData": [Function],
  "handleBackPress": [Function],
  "handleMonthPress": [Function],
  "handleNextPress": [Function],
  "handleSelect": [Function],
  "handleYearPress": [Function],
  "onDayPress": [Function],
  "onSelectMonth": [Function],
  "onSelectYear": [Function],
  "props": Object {
    "onSelect": [MockFunction] {
      "calls": Array [
        Array [
          "",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
    "selectedDate": "",
  },
  "refs": Object {},
  "renderCalendar": [Function],
  "renderHeader": [Function],
  "renderItem": [Function],
  "renderKeyExtractor": [Function],
  "renderListView": [Function],
  "setState": [Function],
  "state": Object {
    "day": "30",
    "isMonthView": false,
    "isYearView": false,
    "month": 6,
    "selectedDate": "",
    "year": "2021",
    "yearList": Array [
      "2005",
      "2006",
      "2007",
      "2008",
      "2009",
      "2010",
      "2011",
      "2012",
      "2013",
      "2014",
      "2015",
      "2016",
      "2017",
      "2018",
      "2019",
      "2020",
    ],
    "yearTitle": "2005 - 2020",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useDeferredValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
        "useTransition": [Function],
      },
      "_element": <CalendarComponent
        onSelect={
          [MockFunction] {
            "calls": Array [
              Array [
                "",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        selectedDate=""
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <View>
        <CalendarHeader
          headerTitle="July 2021"
          headerYear="2021"
          isCurrentMonth={false}
          isMonthView={false}
          onBackPress={[Function]}
          onMonthPress={[Function]}
          onNextPress={[Function]}
          onYearPress={[Function]}
          yearTitle="2005 - 2020"
        />
        <React.Fragment>
          <Calendar
            current="Fri Jul 30 2021"
            enableSwipeMonths={false}
            hideArrows={true}
            markedDates={
              Object {
                "2020-12-30": Object {
                  "customStyles": Object {
                    "container": Object {
                      "backgroundColor": "#0084F8",
                      "borderRadius": 4,
                    },
                    "text": Object {
                      "color": "#FFFFFF",
                    },
                  },
                },
              }
            }
            markingType="custom"
            minDate={2020-12-30T08:01:57.433Z}
            onDayPress={[Function]}
            renderHeader={[Function]}
            style={
              Object {
                "height": 310,
              }
            }
            theme={Object {}}
          />
          <Button
            containerStyle={
              Object {
                "flex": 0,
                "margin": 16,
              }
            }
            onPress={[Function]}
            title="Select"
            type="primary"
          />
        </React.Fragment>
      </View>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;

exports[`CalendarComponent should match snapshot when isMonthView is true 1`] = `
<View>
  <CalendarHeader
    headerTitle="June 2020"
    headerYear="2020"
    isCurrentMonth={false}
    isMonthView={false}
    onBackPress={[Function]}
    onMonthPress={[Function]}
    onNextPress={[Function]}
    onYearPress={[Function]}
    yearTitle="2005 - 2020"
  />
  <Calendar
    current="2020-06-19"
    enableSwipeMonths={false}
    hideArrows={true}
    key="2020-06-19"
    markedDates={
      Object {
        "2020-06-19": Object {
          "customStyles": Object {
            "container": Object {
              "backgroundColor": "#0084F8",
              "borderRadius": 4,
            },
            "text": Object {
              "color": "#FFFFFF",
            },
          },
        },
      }
    }
    markingType="custom"
    minDate={2020-12-30T08:01:57.423Z}
    onDayPress={[Function]}
    renderHeader={[Function]}
    style={
      Object {
        "height": 310,
      }
    }
    theme={Object {}}
  />
  <Button
    containerStyle={
      Object {
        "flex": 0,
        "margin": 16,
      }
    }
    onPress={[Function]}
    title="Select"
    type="primary"
  />
</View>
`;
